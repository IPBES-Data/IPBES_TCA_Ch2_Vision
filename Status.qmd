---
title: 'Report Transformative Change Literature Search Chapter 2'
author: Rainer M Krug [Rainer.Krug@Senckenberg.de](mailto:Rainer.Krug@Senckenberg.de)
format:
    html:
        toc: true
        toc-depth: 5
        toc_expand: true
        embed-resources: true
        code-fold: true
        code-summary: 'Show the code'
params:

    # s_level_1: (transformation OR transition* OR ((shift OR change) AND (fundamental OR deep OR radical))) AND (socio OR social OR politics OR political OR governance OR economical OR cultural OR system* OR technological OR inner OR personal)  
    
    # s_tfc_rev: "('transformative change'  OR  'deliberate transformation*'  OR  'transformative turn*'  OR  'transition*'  OR  'social-ecological change*'  OR  'deep change'  OR  'fundamental alteration'  OR  'profound change'  OR  'profound transformation'  OR  'radical transformation'  OR  'transformational change'  OR  'complete change'  OR  'complete transformation'  OR  'drastic change'  OR  'in-depth transformation'  OR  'progressive change'  OR  'radical alteration'  OR  'radical change'  OR  'revolutionary change'  OR  'significant modification'  OR  'total transformation'  OR  'transition'  OR  'pathway'  OR  'power'  OR  'agency'  OR  'scale'  OR  'leverage'  OR  'context'  OR  'process'  OR  'regime'  OR  'shift'  OR  'views'  OR  'value*'  OR  'structure*'  OR  'institution*' OR  'deliberate'  OR  'structural'  OR  'fundamental'  OR  'system*'  OR  'deep'  OR  'radical'  OR  'profound'  OR  'drastic'  OR  'widespread'  OR  'political'  OR  'economical'  OR  'structur*'  OR  'complete'  OR  'progressive'  OR  'revolutionary'  OR  'substantial'  OR  'significant') AND ('transformation'  OR  'alteration'  OR  'change'  OR  'turn'  OR  'action' OR  'transition'  OR  'shift' )"
 
    s_transformative_change: "(transformation OR transition* OR ((shift OR change) AND (fundamental OR deep OR radical))) AND (socio OR social OR politics OR political OR governance OR economical OR cultural OR system* OR technological OR inner OR personal)   OR   ( ( 'transformative change'  OR  'deliberate transformation*'  OR  'transformative turn*'  OR  'transition*'  OR  'social-ecological change*'  OR  'deep change'  OR  'fundamental alteration'  OR  'profound change'  OR  'profound transformation'  OR  'radical transformation'  OR  'transformational change'  OR  'complete change'  OR  'complete transformation'  OR  'drastic change'  OR  'in-depth transformation'  OR  'progressive change'  OR  'radical alteration'  OR  'radical change'  OR  'revolutionary change'  OR  'significant modification'  OR  'total transformation'  OR  'transition'  OR  'pathway'  OR  'power'  OR  'agency'  OR  'scale'  OR  'leverage'  OR  'context'  OR  'process'  OR  'regime'  OR  'shift'  OR  'views'  OR  'value*'  OR  'structure*'  OR  'institution*' OR  'deliberate'  OR  'structural'  OR  'fundamental'  OR  'system*'  OR  'deep'  OR  'radical'  OR  'profound'  OR  'drastic'  OR  'widespread'  OR  'political'  OR  'economical'  OR  'structur*'  OR  'complete'  OR  'progressive'  OR  'revolutionary'  OR  'substantial'  OR  'significant') AND ('transformation'  OR  'alteration'  OR  'change'  OR  'turn'  OR  'action' OR  'transition'  OR  'shift' ) ) "

    s_nature_environment: "biodiversity OR marine OR terrestrial OR forest* OR woodland* OR grassland* OR savanna* OR shrubland* OR peatland OR ecosystem* OR lake* OR river* OR sea OR ocean* OR meadow* OR heathland* OR mires OR bog* OR tundra OR biosphere OR desert* OR mountain* OR 'natural resource*' OR estuary OR fjord* OR fauna OR flora OR soil* OR 'coastal waters' OR wetland* OR freshwater OR marshland OR marches OR dryland* OR seascape* OR landscape* OR coast* OR 'arable land*' OR 'agricultural land*' OR 'natural environment*' OR 'environmental resource*' OR agroforest* OR 'agro-forest*' OR plantation* OR 'protected areas' OR chaparral OR sustainable OR environment OR resilience OR conservation OR ecosystem* OR nature* OR planet* OR Earth OR biosphere OR ecological OR 'socio-ecological' OR restoration OR wildlife OR landscape OR species OR bioeconomy OR 'resource system' OR 'coupled system' OR nature"

    s_ch1_01: ((root OR underlying OR indirect) AND (driver* OR cause*))
    s_ch1_02:( equity OR inequity OR just* OR unjust* OR inequality OR equality OR Fair* OR unfair*)
    s_ch1_03: (scal* OR impact* OR leapfrog* OR transfer*)
    s_ch1_04: (inclusi* OR particip* OR engagement* OR democratic* OR coproduct* OR transdisc* OR multiactor OR multi-actor OR integrat*)
    s_ch1_05: (evaluat* OR reflex* OR reflect* OR monitor* OR adapt* OR learn*)
    s_ch1_06: (responsib* OR accountab* OR rights OR steward* OR reciproc* OR interdependen* OR (relation* OR plural OR divers* OR sustainability-aligned OR (care AND (value* OR ethic*)))
)
    s_ch2:  (“vision” OR “future” OR “visionar*”OR “scenarios” OR “imagination” OR “imager*” OR “creativity” OR “desire”  OR “wish*” OR “visioning” OR “process” OR “participatORy process*” OR “deliberate process*” OR “polic*” OR “target” OR  “view*” OR ”value” OR “cosmovision” OR  “cosmocentric” OR “dream*” OR “fiction” OR “hope” OR “mission” OR “objective” OR “stORy” OR “wORldview*” OR “aspiration*” OR “action” OR “plan*” OR “strateg*” OR “intention” OR “model*” OR “solution*” OR  “innovation*” OR “perspective” OR “platfORm” OR “collective action” OR “cooperation” OR “consultation”OR “coalition*” OR “response” OR “movement” OR “effORt” OR “initiative” OR “activity” OR “reaction” OR “perfORmance” OR “operation” OR “effect*” OR “task” OR “project” OR “influence” o “moment” OR “discourse” OR “motivation” OR “iteration” OR “roadmap” OR “agenda” OR “project” OR “programm” OR “government” OR “technique”  OR “inspiration” OR “culture” OR “universe*” OR “reality” OR “fantasy” OR “perception” OR “visualization” OR “approach” OR “image” OR “arquetype” OR “existence” OR “cosmolog*” OR “co-production” OR “knowledge” OR “dialogue” OR “transmission” OR “conceptual*” OR “ceremon*” OR “relationships” OR  “respect” OR “reciprocity” OR  “responsibilities” OR “solidarity” OR “harmony” OR “self-determination” OR “communit*” OR “spiritual*” OR “languague” OR “territORy” OR “oppORtunit*” OR “sight” OR “fOResight” OR “idea” OR “appearance”)

    s_ch3_01: (Technolog* OR Science* OR science-society OR science-technology OR Solution)
    s_ch3_02: (co-creat* OR solution* OR knowledge* OR sistem* OR t-lab* OR educat* OR socio-technic*)
    s_ch3_03: (System* OR pathways OR connect* OR Agroecolog* OR Institutional OR Institutions OR Government*)
    s_ch3_04: (inner OR Personal OR Religio* OR Love OR Lov* OR Feelings OR Stewardship OR Care OR Beliefs OR Belie* OR Awareness OR Self-Awareness)
    s_ch3_05: (Worldviews OR Grassroot* OR Community-based OR Indigenous OR Leadership OR Critical Science OR Econfeminism OR Political Ecology OR Power OR Agency OR Environment*)
    s_ch3_06: (Economi* Or Political Economy OR institution* OR institutions OR govern* OR econom* OR governance OR governm* OR globalization OR states OR colonial OR coloniali* OR labour OR organization*)


    s_ch4_01:  (challenge* OR barrier* OR obstacle* OR hinder* OR hindrance* OR block* OR prevent* OR deter* OR inertia* OR path dependence* OR path dependency* OR stasis* OR lock-in* OR trap* OR habits* OR habitual* OR status quo* OR power* OR  "limiting factOR*") AND (economic inequality OR Wealth concentration OR Socioeconomic inequality OR financialization OR uneven development OR Financialization OR Structural adjustment OR Sovereign Debt OR inequality OR Policy effectiveness)
    s_ch4_02:  (challenge* OR barrier* OR obstacle* OR hinder* OR hindrance* OR block* OR prevent* OR deter* OR inertia* OR path dependence* OR path dependency* OR stasis* OR lock-in* OR trap* OR habits* OR habitual* OR status quo* OR power* OR  "limiting factor*") AND   ( "clean technolog*"  OR  "clean innovation*"  OR  "sustainable innovation"  OR  "sustainable technological innovation*" ) AND ( "limited access"  OR  "limited availability"  OR  "lack of access"  OR "unavailability" )

    s_ch5_01:  params$s_vision
    s_ch5_02:  params$s_vision AND params$s_case    
   
    s_vision: "('vision' OR 'future' OR 'visionar*' OR 'scenarios' OR 'imagination' OR 'imager*' OR 'creativity' OR 'desire' OR 'wish*' OR 'visioning' OR 'process' OR 'participatory process*' OR 'deliberate process*' OR 'polic*' OR 'target' OR 'view*' OR 'value' OR 'cosmovision' OR 'cosmocentric' OR 'dream*' OR 'fiction' OR 'hope' OR 'mission' OR 'objective' OR 'story' OR 'worldview*' OR 'aspiration*' OR 'action' OR 'plan*' OR 'strateg*' OR 'intention' OR 'model*' OR 'solution*' OR 'innovation*' OR 'perspective' OR 'platform' OR 'collective action' OR 'cooperation' OR 'consultation' OR 'coalition*' OR 'response' OR 'movement' OR 'effort' OR 'initiative' OR 'activity' OR 'reaction' OR 'performance' OR 'operation' OR 'effect*' OR 'task' OR 'project' OR 'influence' OR 'moment' OR 'discourse' OR 'motivation' OR 'iteration' OR 'roadmap' OR 'agenda' OR 'project' OR 'programm' OR 'government' OR 'technique'  OR 'inspiration' OR 'culture' OR 'universe*' OR 'reality' OR 'fantasy' OR 'perception' OR 'visualization' OR 'approach' OR 'image' OR 'arquetype' OR 'existence' OR 'cosmolog*' OR 'co-production' OR 'knowledge' OR 'dialogue' OR 'transmission' OR 'conceptual*' OR 'ceremon*' OR 'relationships' OR 'respect' OR 'reciprocity' OR 'responsibilities' OR 'solidarity' OR 'harmony' OR 'self-determination' OR 'communit*' OR 'spiritual*' OR 'languague' OR 'territory' OR 'opportunit*' OR 'sight' OR 'foresight' OR 'idea' OR 'appearance')"

    s_case: "('case stud*' OR 'case' OR 'study area*' OR 'example*' OR 'evaluation' OR 'concrete' OR 'empirical', OR 'practical' OR 'initiative*')"

    concept_cuttoff: 0.6

    key_papers:
      - "./key papers /Ch 1 - Arun.csv"
      - "./key papers /Ch 2 - Sebastian.csv"
      - "./key papers /Ch 5 - Hannah.csv"
      - "./key papers /Ch 5 - Victoria.csv"

    mc.cores: 8
---

``` css
.fullwidth {
  width: 100vw;
  margin-left: calc(50% - 50vw);
}
```

# Working Title
TfC Ch 2 Vision


## Code repo

[Github - private](https://github.com/IPBES-Data/IPBES-TfC-Ch-2-Vision)

# Introduction
The following terminology is used:

- **R1** - the first round of the literature search, i.e. (R1-transform) AND (R1-nature) AND (R1-vision)
    - **R1-transform** results of R1 only using the Transform search term
    - **R1-transform VA** results of R1 only using the Transform search term from the Values Assessment
    - **R1-nature** results of R1 only using the Nature search term
    - **R1-vision** results of R1 only using the Vision search term
    - **R1-X** results of R1 using the X search term
- **R2** - the second round of the literature search, i.e. R1 AND (search term for Case)

```{r}
#| label: setup
#| include: false
#| 

if (!exists("params")){
    params <- rmarkdown::yaml_front_matter('~/Documents_Local/git/IPBES_data_tsu/Assessments/Transformative Change/IPBES_TFC_Ch2_Vision/Status.qmd')$params
}

library(openalexR)
library(dplyr)

library(knitr)
library(tictoc)

if (!require("IPBES.R")){
    install.packages("IPBES.R", repos = c("https://ipbes-data.r-universe.dev", "https://cloud.r-project.org"))
    if (!require("IPBES.R")){
        stop("Package `IPBES.R` is not available and could not be installed!")
    }

}

s_tfc_tsu <- paste0("'", params$tfc_tsu, "'", collapse = " OR ")
```



# Suggested New search strategy

The suggested search strategy is a combination of a keyword based search Results (see @key_papers_in_corpi) and a concepts based filter. The concepts terms are selected by using their score, i.e. all concepts with a score higher than {r params$concept_cuttoff} are used. Please see section @concepts_selected for the list of concepts.

```{r}
#| label: search_combined 
#| 

#' @title FUNCTION_TITLE
#' @description FUNCTION_DESCRIPTION
#' @param search PARAM_DESCRIPTION, Default: NULL
#' @param concepts character vector. The search will be done by using `AND`, Default: NULL
#' @param dois character vector. dois which should be filtered for. If 
#'   longer than 1, these are collapsed into an `OR`. Default: NULL
#' @param count_only PARAM_DESCRIPTION, Default: TRUE
#' @param verbose PARAM_DESCRIPTION, Default: FALSE
#' @param return_call PARAM_DESCRIPTION, Default: FALSE
#' @return OUTPUT_DESCRIPTION
#' @details DETAILS
#' @examples 
#' \dontrun{
#' if(interactive()){
#'  #EXAMPLE1
#'  }
#' }
#' @seealso 
#'  \code{\link[openalexR]{oa_query}}, \code{\link[openalexR]{oa_request}}
#' @rdname get_search_combined
#' @export 
#' @importFrom openalexR oa_query oa_request
get_search_combined <- function(
    search = NULL,
    concepts.id = NULL,
    dois = NULL,
    count_only = TRUE,
    verbose = FALSE,
    return_call = FALSE) {

    # if (length(concepts.id > 1)){
    #   concepts.id <- paste0(concepts.id, collapse = "|")
    # }

    if (length(dois > 1)) {
        dois <- paste0(dois, collapse = "|")
    }

    query <- oa_query(
        search = search,
        filter = list(concepts.id = concepts.id, from_publication_date = "1980-01-01", to_publication_date = "2023-12-30"),
        doi = dois,
        verbose = verbose
    )

    if (return_call) {
        return(query)
    }

    result <- query |>
        openalexR::oa_request(count_only = count_only, verbose = verbose)

    if (count_only) {
        result <- unlist(result)
    }

    return(result)
}
```


```{r}
#| label: TMP_search_combined_test
#| eval: false

ids <- key_works_concepts |>
  do.call(what = rbind) |>
  filter(level <= 1) |>
  arrange(desc(score)) |>
  distinct(id, .keep_all = TRUE) |>
  select(id) |>
  # slice(1:50) |>
  unlist() |>
  as.vector()


dois <- key_works_df |>
  do.call(what = rbind) |>
  select(doi) |>
  unlist() |>
  unique() |>
  as.vector()



get_search_combined(
  # search = paste0( "(", params$s_tsf_comb, ")" ),
  search = paste0( "(", params$s_tsf_comb, ") AND (",  params$s_nat_rev, ")" ),
  concepts.id = paste0(ids, collapse = "|"),
#  dois = dois,
  count_only = TRUE,
  verbose = TRUE
)

openalexR::oa_query(search = s_tfc_tsu) |>
  openalexR::oa_request(count_only = TRUE) |>
  unlist()

x <- (openalexR::oa_query(doi = key_papers) |> openalexR::oa_request(count_only = FALSE) |> oa2df(entity = "works"))
```


# Get and calculate Data
## Search Term Definition
### search_term_hits
```{r}
#| label: get_search_term_hits
#|

tic()
fn <- file.path(".", "data", "search_term_hits.rds")
if (!file.exists(fn)) {
    search_term_hits <- rbind(
        openalexR::oa_query(search = "") |> openalexR::oa_request(count_only = TRUE) |> unlist(),
        openalexR::oa_query(search = params$s_tsf_comb) |> openalexR::oa_request(count_only = TRUE) |> unlist(),
        openalexR::oa_query(search = params$s_nat_rev) |> openalexR::oa_request(count_only = TRUE) |> unlist()
        # openalexR::oa_query(search = s_tfc_tsu) |> openalexR::oa_request(count_only = TRUE) |> unlist(),
        # openalexR::oa_query(search = params$s_nat) |> openalexR::oa_request(count_only = TRUE) |> unlist(),
        # openalexR::oa_query(search = params$s_nat_5) |> openalexR::oa_request(count_only = TRUE) |> unlist(),
        # openalexR::oa_query(search = params$s_nat_va) |> openalexR::oa_request(count_only = TRUE) |> unlist(),
        # openalexR::oa_query(search = params$s_nat_va_new) |> openalexR::oa_request(count_only = TRUE) |> unlist(),
        # openalexR::oa_query(search = params$s_vis) |> openalexR::oa_request(count_only = TRUE) |> unlist(),
        openalexR::oa_query(
            search = paste0(
                "(", params$s_tsf_comb, ")", " AND ",
                "(", params$s_nat_rev, ")"
            )
        ) |> oa_request(count_only = TRUE) |> unlist(),
        # openalexR::oa_query(
        #     search = paste0(
        #         "(", params$s_tfc_5, ")", " AND ",
        #         "(", params$s_nat_5, ")"
        #     )
        # ) |> oa_request(count_only = TRUE) |> unlist(),
        # openalexR::oa_query(
        #     search = paste0(
        #         "(", params$s_tfc_new, ")", " AND ",
        #         # '(', params$s_nat_5, ')', ' AND ',
        #         "(", params$s_vis, ")"
        #     )
        # ) |> oa_request(count_only = TRUE) |> unlist(),
        # openalexR::oa_query(
        #     search = paste0(
        #         "(", params$s_nat_5, ")", " AND ",
        #         "(", params$s_vis, ")"
        #     )
        # ) |> oa_request(count_only = TRUE) |> unlist()
    ) |>
    as.data.frame() |>
        mutate(
            query = c(
                "In OA",
                "Transform",
                "Transform Ch 5",
                "Transform tsu",
                "Nature",
                "Nature Ch 5",
                "Nature Va",
                "Nature Va New",
                "Visions",
                "TfC & Nature",
                "(TfC & Nature) Ch 5",
                "TfC New & Nature Ch 5",
                "(Nature & Vision) Ch 5"
            )
        ) |>
        mutate(page = NULL, per_page = NULL) |>
        mutate(count = formatC(count, format = "f", big.mark = ",", digits = 0)) |>
        relocate(query, .before = count)
    saveRDS(search_term_hits, file = fn)
} else {
    search_term_hits <- readRDS(fn)
}
toc()
```


## Key Papers and Works

### key_papers
Key papers were selected by Sebastian, Victoria and Hannah. 

```{r}
#| label: get_key_papers
#| 

fn <- file.path(".", "data", "key_papers.rds")
if (!file.exists(fn)) {
  key_papers <- lapply(
    params$key_papers,
    function(fn){
      read.csv(fn) |>
      select(Author, Publication.Year, Title, Publication.Title, DOI) |>
      rename(Year = Publication.Year, Journal = Publication.Title) |>
      arrange(desc(Year))
    }
  )
  saveRDS(key_papers, file = fn)
} else {
  key_papers <- readRDS(fn)
}
```

### key_works

```{r}
#| label: key_works
#| 

fn_kw <- file.path(".", "data", "key_works.rds")
fn_kw_df <- file.path(".", "data", "key_works_df.rds")
if (!all(file.exists(fn_kw, fn_kw_df))) {
  key_works <- lapply(
    key_papers,
    function(kp) {
      dois <- kp |>
        select(DOI) |>
        filter(DOI != "") |>
        unlist() |>
        tolower() |>
        unique()
      openalexR::oa_query(doi = dois) |>
        openalexR::oa_request(count_only = FALSE)
    }
  )
  saveRDS(key_works, file = fn_kw)

  key_works_df <- lapply(
    key_works,
    oa2df,
    entity = "works"
  )
  saveRDS(key_works_df, fn_kw_df)
} else {
  key_works <- readRDS(file = fn_kw)
  key_works_df <- readRDS(fn_kw_df)
}
```

### key_works_concepts

```{r}
#| label: key_works_concepts
#| 

fn <- file.path(".", "data", "key_works_concepts.rds")
key_works_concepts <- lapply(
    key_works_df,
    function(kw_df) {
        do.call(rbind, kw_df$concepts) |>
            filter(score > params$concept_cuttoff) |>
            arrange(desc(score))
    }
)
saveRDS(key_works_concepts, file = fn)

```

### key_works_hits

```{r}
#| label: key_works_hits
#| 

fn <- file.path(".", "data", "key_works_hits.rds")
if (!file.exists(fn)) {
  key_works_hits <- lapply(
    key_works_df,
    function(kw_df) {
      message("Getting one key paper set... ")
      dois <- kw_df |>
        select(doi) |>
        distinct() |>
        unlist() |>
        unique() |>
        tolower()

      kw_h <- cbind(
        In_OA = get_count(search_term = "", dois = dois),
        R1_tf_level1 = get_count(search_term = params$s_level_1, dois = dois),
        R1_tf_rev = get_count(search_term = params$s_tfc_rev, dois = dois),
        R1_tf_comb = get_count(search_term = params$s_tfc_comb, dois = dois),
        R1_nat_rev = get_count(search_term = params$s_nat_rev, dois = dois)
        # R1_comb = get_count(search_term = paste0("(",  params$s_tfc_comb, ") AND (", params$s_nat_rev, ")"), dois = dois)
        # R1_nat = get_count(search_term = params$s_nat, dois = dois),
        # R1_nat_Ch5 = get_count(search_term = params$s_nat_5, dois = dois),
        # R1_nat_VA = get_count(search_term = params$s_nat_va_new, dois = dois),
        # R1_vis = get_count(search_term = params$s_vis, dois = dois)
      ) |>
        as.data.frame()

      kw_h <- cbind(
        kw_h,
        Total = rowSums(kw_h)
      ) |>
        mutate(Total = ifelse(In_OA >= 1, Total - 1, Total))

      kw_h <- rbind(
        kw_h,
        colSums(kw_h)
      )

      rownames(kw_h)[[nrow(kw_h)]] <- "Total"
      return(kw_h)
    }
  )

  saveRDS(key_works_hits, file = fn)
} else {
  key_works_hits <- readRDS(file = fn)
}
```


# Results

## Key Papers
### Number of Hits per Search Term

```{r}
#| label: hits_per_search_term_table
search_term_hits |>
    knitr::kable(
        caption = "Number of hits",
    )
```

### Key papers in different corpi {#key_papers_in_corpi}

Here we show the number of hits for the key papers in the different corpi. The columns are:

- **In_OA**: is paper in OpenAlex?
- **R1_tf**: Is paper in Transformatifa Change Chapter 2
- **R1_tf_Ch5** Is paper in Transformative Change Chapter 5?
- **R1_tf_ts5** Is paper in Transformative Change definition as derived by the TSU?
- **R1_nat** Is paper in Nature Chapter 2?
- **R1_nat_Ch5**:  Is paper in Nature Chapter 5?
- **R1_nat_VA**: Is paper in Nature as defined in the Values Assessment?
- **R1_vis**: Is paper in Vision Chapter 2?
- **Total**: Total number of hits per row

```{r}
#| label: key_paper_hits_in_corpi
#| 

tbl <- lapply(
  names(key_works_hits),
  function(n) {
    kwh <- key_works_hits[[n]]
    total <- grepl("Total", rownames(kwh))
    rownames(kwh)[!total] <- paste0(n, " - <a href='https://doi.org/", rownames(kwh)[!total], "' target='_blank'>Click here</a>")
    rownames(kwh)[total] <- paste0("**", n, " - Total**")
    kwh |>
      arrange(Total) |>
      apply(
        c(1, 2),
        function(x) {
          ifelse(x == 0, "<font color='red'>0</font>", paste0("<font color='green'>", x, "</font>"))
        }
      ) |> as.data.frame()
  }
) |>
do.call(what = rbind)

rbind(
    "**overall**" = paste0(
        "**",
        c(
            search_term_hits |>
                slice(c(1:6, 8:9)) |>
                select(count) |>
                unlist() |>
                as.vector(),
            ""
        ),
        "**"
    ),
    tbl
) |>
    knitr::kable()
```


## Search Terms
### Differences Transformative Change terms

```{r}
tfc <- list(
  tfc = params$s_tfc |>
    gsub(pattern = "\\)|\\(", replacement = "") |>
    strsplit(split = " AND ") |>
    lapply(
        strsplit,
        split = " OR "
    ),
  tfc_5 = params$s_tfc_5 |>
    gsub(pattern = "\\)|\\(", replacement = "") |>
    strsplit(split = " OR ") |>
    unlist() |>
    sort(),
  tfc_new = params$s_tfc_new |>
    gsub(pattern = "\\)|\\(", replacement = "") |>
    strsplit(split = " OR ") |>
    unlist() |>
    sort()
)

tfc$tfc <- c(
    tfc$tfc[[1]][[1]],
    paste0("Z_AND ", tfc$tfc[[1]][[2]])
)

tfc$all <- unique(c(tfc$tfc, tfc$tfc_5, tfc$tfc_new)) |>
    sort()

present <- data.frame(
    TfC = (tfc$all %in% tfc$tfc) |> as.numeric(),
    TfC_Ch_5 = (tfc$all %in% tfc$tfc_5) |> as.numeric(),
    TfC_new = (tfc$all %in% tfc$tfc_new) |> as.numeric()
)
rownames(present) <- tfc$all

present <- cbind(
  present,
  Total = rowSums(present)
)

present <- rbind(
  present,
  colSums(present)
)

rownames(present)[[nrow(present)]] <- "Total"

present |>
  apply(c(1, 2), function(x) {
    ifelse(x == 0, "<font color='red'>0</font>", paste0("<font color='green'>", x, "</font>"))
  }) |>
  knitr::kable(
    caption = "Search terms as in the different Transformativ Change definitions"
  )
```

### Differences Nature terms

```{r}
nat <- list(
  nat = params$s_nat |>
    gsub(pattern = "\\)|\\(", replacement = "") |>
    strsplit(split = " OR ") |>
    unlist() |>
    sort(),
  nat_5 = params$s_nat_5 |>
    gsub(pattern = "\\)|\\(", replacement = "") |>
    strsplit(split = " OR ") |>
    unlist() |>
    sort(),
  nat_va = params$s_nat_va |>
    gsub(pattern = "\\)|\\(", replacement = "") |>
    strsplit(split = " OR ") |>
    unlist() |>
    sort(),
  nat_va_new = params$s_nat_va_new |>
    gsub(pattern = "\\)|\\(", replacement = "") |>
    strsplit(split = " OR ") |>
    unlist() |>
    sort()
)

nat$all <- unique(c(nat$nat, nat$nat_5, nat$nat_va, nat$nat_va_new)) |>
    sort()

present <- data.frame(
    Nature        = (nat$all %in% nat$nat) |> as.numeric(),
    Nature_Ch_5   = (nat$all %in% nat$nat_5) |> as.numeric(),
    Nature_VA     = (nat$all %in% nat$nat_va) |> as.numeric(),
    Nature_VA_new = (nat$all %in% nat$nat_va_new) |> as.numeric()
)
rownames(present) <- nat$all

present <- cbind(
  present,
  Total = rowSums(present)
)

present <- rbind(
  present,
  colSums(present)
)

rownames(present)[[nrow(present)]] <- "Total"

present |>
  apply(c(1, 2), function(x) {
    ifelse(x == 0, "<font color='red'>0</font>", paste0("<font color='green'>", x, "</font>"))
  }) |>
  knitr::kable(
    caption = "Search terms as in the different Nature definitions"
  )
```

### Vision Terms

```{r}
data.frame(
  Terms = params$s_vis |>
   gsub(pattern = "\\)|\\(", replacement = "") |>
     strsplit(split = " OR ") |>
     unlist() |>
     sort()
) |>
  knitr::kable(
    caption = "Search terms for Vision definitions"
  )
```

### Case Study Terms

```{r}
data.frame(
  Terms = params$s_case |>
   gsub(pattern = "\\)|\\(", replacement = "") |>
     strsplit(split = " OR ") |>
     unlist() |>
     sort()
) |>
  knitr::kable(
    caption = "Search terms for Case Study definitions"
  )
```


#W# Detailed Search Terms

### [About Transformative change] Transformative change synonyms
This should be aligned with TfC Ch 5 search

### Chapter 2

```{r}
#| label: get_tfc
#| 

fn <- file.path(".", "data", "tfc.rds")
if (file.exists(fn)) {
    dat <- readRDS(fn)
} else {
    x <- strsplit(params$s_tfc, split = " AND ")
    dat <- x[[1]][1] |>
        gsub(pattern = "'|\\)|\\(", replacement = "") |>
        strsplit(split = " OR ") |>
        unlist() |>
        sort() |>
        sapply(
            FUN = function(x) {
                openalexR::oa_query(search = paste0("'", x, "'")) |>
                    oa_request(count_only = TRUE) |>
                    unlist()
            }
        ) |>
        t() |>
        as.data.frame() |>
        dplyr::arrange(desc(count)) |>
        mutate(
            page = NULL,
            per_page = NULL,
            count = formatC(count, format = "f", big.mark = ",", digits = 0)
        )
    saveRDS(dat, file = fn)
}
knitr::kable(dat)
```
**AND**

```{r}
#| label: get_tfc_2
#| 

fn <- file.path(".", "data", "tfc_2.rds")
if (file.exists(fn)) {
    dat <- readRDS(fn)
} else {
    dat <- x[[1]][2] |>
        gsub(pattern = "'|\\)|\\(", replacement = "") |>
        strsplit(split = " OR ") |>
        unlist() |>
        sort() |>
        sapply(
            FUN = function(x) {
                openalexR::oa_query(search = paste0("'", x, "'")) |>
                    oa_request(count_only = TRUE) |>
                    unlist()
            }
        ) |>
        t() |>
        as.data.frame() |>
        dplyr::arrange(desc(count)) |>
        mutate(
            page = NULL,
            per_page = NULL,
            count = formatC(count, format = "f", big.mark = ",", digits = 0)
        )
    saveRDS(dat, file = fn)
}

knitr::kable(dat)
``` 

### Chapter 5

```{r}
#| label: get_tfc_5
#| 

fn <- file.path(".", "data", "tfc_5.rds")
if (file.exists(fn)) {
    dat <- readRDS(fn)
} else {
    dat  <- params$s_tfc_5 |>
    gsub(pattern = "'|\\)|\\(", replacement = "") |>
    strsplit(split = " OR ") |>
    unlist() |>
    sort() |>
    sapply(
        FUN = function(x) {
            openalexR::oa_query(search = paste0("'", x, "'")) |>
                oa_request(count_only = TRUE) |>
                unlist()
        }
    ) |>
    t() |>
    as.data.frame() |>
    dplyr::arrange(desc(count)) |>
    mutate(
        page = NULL,
        per_page = NULL,
        count = formatC(count, format = "f", big.mark = ",", digits = 0)
    )
    saveRDS(dat, file = fn)
}
    
knitr::kable(dat)
```


### New
```{r}
#| label: get_tfc_new
#| 

fn <- file.path(".", "data", "tfc_new.rds")
if (file.exists(fn)) {
    dat <- readRDS(fn)
} else {
    dat  <- params$s_tfc_new |>
    gsub(pattern = "'|\\)|\\(", replacement = "") |>
    strsplit(split = " OR ") |>
    unlist() |>
    sort() |>
    sapply(
        FUN = function(x) {
            openalexR::oa_query(search = paste0("'", x, "'")) |>
                oa_request(count_only = TRUE) |>
                unlist()
        }
    ) |>
    t() |>
    as.data.frame() |>
    dplyr::arrange(desc(count)) |>
    mutate(
        page = NULL,
        per_page = NULL,
        count = formatC(count, format = "f", big.mark = ",", digits = 0)
    )
    saveRDS(dat, file = fn)
}
 
knitr::kable(dat)
```


## AND (nature synonyms) [use dictionary suggested by Aidin]
```{r}
#| label: get_tfc_nat
#| 

fn <- file.path(".", "data", "tfc_nat_va_new.rds")
if (file.exists(fn)) {
    dat <- readRDS(fn)
} else {
    dat  <- params$s_nat_va_new |>
    gsub(pattern = "\\)|\\(", replacement = "") |>
    strsplit(split = " OR ") |>
    unlist() |>
    sort() |>
    sapply(
        FUN = function(x) {
            openalexR::oa_query(search = paste0("'", x, "'")) |>
                oa_request(count_only = TRUE) |>
                unlist()
        }
    ) |>
    t() |>
    as.data.frame() |>
    dplyr::arrange(desc(count)) |>
    mutate(
        page = NULL,
        per_page = NULL,
        count = formatC(count, format = "f", big.mark = ",", digits = 0)
    )
    saveRDS(dat, file = fn)
 }
 
knitr::kable(dat)
```

## AND (visions) [Ch 2 Key terms, https://www.ipbes.net/glossary-tag/vision, Oxford Dictionary]

```{r}
#| label: get_tfc_vis
#| 

fn <- file.path(".", "data", "tfc_vis.rds")
if (file.exists(fn)) {
    dat <- readRDS(fn)
} else {
    dat <- params$s_vis |>
    gsub(pattern = "'|\\)|\\(", replacement = "") |>
    strsplit(split = " OR ") |>
    unlist() |>
    sort() |>
    sapply(
        FUN = function(x) {
            openalexR::oa_query(search = paste0("'", x, "'")) |>
                oa_request(count_only = TRUE) |>
                unlist()
        }
    ) |>
    t() |>
    as.data.frame() |>
    dplyr::arrange(desc(count)) |>
    mutate(
        page = NULL,
        per_page = NULL,
        count = formatC(count, format = "f", big.mark = ",", digits = 0)
    )
    saveRDS(dat, file = fn)
 }
 
knitr::kable(dat)
```



# TODO

- Transformative Change Query term identical between chapters 2 and 5
- Nature Query terms identical between chapters between chapters 2 and 5
- 

- Randomly 100 papers from R1
- add large number of articles to Zotero
- all open acces articles only for now.

## R3
- get all pdfs which are available from R3
- Results, Discussion and Conclusion - Vision, geograph, country name, words from transformative change

# ==== APPENDIX ====


## Results WoS

### R1

[R1 WoS](https://www.webofscience.com/wos/alldb/summary/9cc620dd-dfc6-4414-acc0-983d4a56314c-a1bdf5a4/relevance/1)

1,237,718 hits

### R2

AND ('case stud*' OR 'case' OR 'study area*' OR 'example*' OR 'evaluation' OR 'concrete' OR 'empirical', OR 'practical' OR 'initiative*')

[R2 WoS](https://www.webofscience.com/wos/alldb/summary/f6d3094a-0cc2-4662-9b05-0a671c71c86a-a1be094a/relevance/1)

296,551 hits, i.e. about 1,100,000 without case studies
```